name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'release/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - testing
          - production

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [api-gateway, auth-service, order-service, crm-service, inventory-service, finance-service, analytics-service, frontend]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        if: ${{ matrix.service != 'analytics-service' }}
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service == 'frontend' && 'frontend/package-lock.json' || format('backend/{0}/package-lock.json', matrix.service) }}
      
      - name: Set up Python
        if: ${{ matrix.service == 'analytics-service' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: backend/${{ matrix.service }}/requirements.txt
      
      - name: Install dependencies (Node.js)
        if: ${{ matrix.service != 'analytics-service' }}
        working-directory: ${{ matrix.service == 'frontend' && 'frontend' || format('backend/{0}', matrix.service) }}
        run: npm ci
      
      - name: Install dependencies (Python)
        if: ${{ matrix.service == 'analytics-service' }}
        working-directory: backend/${{ matrix.service }}
        run: |
          pip install -r requirements.txt
          pip install flake8
      
      - name: Lint (Node.js)
        if: ${{ matrix.service != 'analytics-service' }}
        working-directory: ${{ matrix.service == 'frontend' && 'frontend' || format('backend/{0}', matrix.service) }}
        run: |
          npm install eslint --no-save
          npx eslint .
      
      - name: Lint (Python)
        if: ${{ matrix.service == 'analytics-service' }}
        working-directory: backend/${{ matrix.service }}
        run: flake8 .

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects
      
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'ERP System'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >-
            --failOnCVSS 7
            --enableRetired
      
      - name: Upload dependency check report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [lint]
    
    strategy:
      matrix:
        service: [api-gateway, auth-service, order-service, crm-service, inventory-service, finance-service, analytics-service]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        if: ${{ matrix.service != 'analytics-service' }}
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/${{ matrix.service }}/package-lock.json
      
      - name: Set up Python
        if: ${{ matrix.service == 'analytics-service' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: backend/${{ matrix.service }}/requirements.txt
      
      - name: Install dependencies (Node.js)
        if: ${{ matrix.service != 'analytics-service' }}
        working-directory: backend/${{ matrix.service }}
        run: npm ci
      
      - name: Install dependencies (Python)
        if: ${{ matrix.service == 'analytics-service' }}
        working-directory: backend/${{ matrix.service }}
        run: pip install -r requirements.txt
      
      - name: Setup test environment
        run: |
          mkdir -p config/environments/testing
          cp config/env-templates/*.env config/environments/testing/
          ./config/setup-env.sh testing
      
      - name: Run tests (Node.js)
        if: ${{ matrix.service != 'analytics-service' }}
        working-directory: backend/${{ matrix.service }}
        run: npm test
      
      - name: Run tests (Python)
        if: ${{ matrix.service == 'analytics-service' }}
        working-directory: backend/${{ matrix.service }}
        run: pytest
      
      - name: Generate test coverage report
        if: ${{ matrix.service != 'analytics-service' }}
        working-directory: backend/${{ matrix.service }}
        run: npm run coverage
      
      - name: Upload test coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-${{ matrix.service }}
          path: backend/${{ matrix.service }}/coverage
  
  build:
    name: Build
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        service: [api-gateway, auth-service, order-service, crm-service, inventory-service, finance-service, analytics-service, frontend]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=testing" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi
      
      - name: Set environment variables for Docker build
        run: |
          echo "Setting up environment variables for ${{ steps.env.outputs.environment }}"
          mkdir -p config/environments/${{ steps.env.outputs.environment }}
          cp config/env-templates/*.env config/environments/${{ steps.env.outputs.environment }}/
          ./config/setup-env.sh ${{ steps.env.outputs.environment }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service == 'frontend' && 'frontend' || 'backend/'}}${{ matrix.service != 'frontend' && matrix.service || '' }}
          file: ./docker/production/${{ matrix.service == 'analytics-service' && 'python-service' || matrix.service == 'frontend' && 'frontend' || 'node-service' }}.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/erp-${{ matrix.service }}:${{ github.sha }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/erp-${{ matrix.service }}:${{ steps.env.outputs.environment }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/erp-${{ matrix.service }}:${{ steps.env.outputs.environment }}
          cache-to: type=inline
          build-args: |
            NODE_ENV=${{ steps.env.outputs.environment }}
            ENVIRONMENT=${{ steps.env.outputs.environment }}
  
  deploy-development:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/'))) || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
      
      - name: Deploy to Railway (Development)
        run: |
          railway up --environment development
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Run database migrations
        run: |
          railway run --environment development -- npm run migrate
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Send deployment notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: Development Deployment Successful
          SLACK_MESSAGE: 'ERP System has been deployed to the development environment'
  
  deploy-testing:
    name: Deploy to Testing
    needs: build
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/develop') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'testing')
    environment: testing
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
      
      - name: Deploy to Railway (Testing)
        run: |
          railway up --environment testing
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Run database migrations
        run: |
          railway run --environment testing -- npm run migrate
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Run smoke tests
        run: |
          railway run --environment testing -- npm run test:smoke
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Send deployment notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: Testing Deployment Successful
          SLACK_MESSAGE: 'ERP System has been deployed to the testing environment'
  
  deploy-production:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://erp.example.com
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
      
      - name: Deploy to Railway (Production)
        run: |
          railway up --environment production
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Run database migrations
        run: |
          railway run --environment production -- npm run migrate
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Run smoke tests
        run: |
          railway run --environment production -- npm run test:smoke
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Send deployment notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: Production Deployment Successful
          SLACK_MESSAGE: 'ERP System has been deployed to the production environment'
  
  rollback:
    name: Rollback on Failure
    needs: [deploy-development, deploy-testing, deploy-production]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
      
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=testing" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi
      
      - name: Rollback deployment
        run: |
          railway rollback --environment ${{ steps.env.outputs.environment }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Send rollback notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_TITLE: Deployment Failed - Rollback Initiated
          SLACK_MESSAGE: 'ERP System deployment to ${{ steps.env.outputs.environment }} failed. Rollback has been initiated.'
